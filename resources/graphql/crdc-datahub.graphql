type Application {
    # backend managed fields
    _id: ID!
    status: String # [New, In Progress, Submitted, In Review, Approved, Rejected]
    createdAt: String # YYYY-MM-DDTHH:MM:SS format
    updatedAt: String # YYYY-MM-DDTHH:MM:SS format
    submittedDate: String # YYYY-MM-DDTHH:MM:SS format
    history: [Event] # An Event will be appended to the list whenever Application's status changes
    applicant: Applicant # auto populated by BE
    organization: Organization
    # sort fields
    programName: String
    studyAbbreviation: String
    # questionnaire data as JSON string
    questionnaireData: String
}

type Event {
    status: String # [New, In Progress, Submitted, In Review, Approved, Rejected]
    reviewComment: String # if applicable
    dateTime: String # YYYY-MM-DDTHH:MM:SS format
    userID: ID!
}

input AppInput {
    _id: ID
    programName: String
    studyAbbreviation: String
    questionnaireData: String
}

type Applicant {
    applicantID: String # auto populated by BE
    applicantName: String # auto populated by BE
    applicantEmail: String # auto populated by BE
}

type Organization {
    _id: ID!
    name: String
}

type ListApplications {
    total: Int
    applications: [Application]
}

type Submission {
    _id: String # aka. submissionID
    name: String
    submitterID: String
    organization: String
    dataCommons: String
    modelVersion: String # for future use
    studyAbbreviation: String
    dbGapID: String # aka. phs number
    bucketName: String # populated from orgnization
    rootPath: String # a submission folder will be created under this path, default is / or "" meaning root folder
    status: String # [Initialized, In Progress, Passed, Failed, Submitted, Released, Canceled, Transferred, Completed]
    concierge: String # Concierge name
    createdAt: String # 2023-05-01T09:23:30Z  ISO data time format
    updatedAt: String # 2023-05-01T09:23:30Z  ISO data time format
}

type ApprovedStudy {
    organization: String
    studyName: String
    studyAbbreviation: String
    dbGapID: String # aka. phs number
}

type Query {
    "User or Fed lead initiated operations"
    getApplication (_id: ID!): Application
    getMyLastApplication: Application

    "Result depends on user's permission"
    listApplications(first: Int = 10, offset: Int = 0, orderBy: String = "Submitted Date", sortDirection: String = "DESC"): ListApplications
    # when first parameter is set to -1, we should return all applications (no pagination)
    # sortDirection in ["ASC", "DESC"]
    # orderBy in ["Submitter Name", "Organization", "Study", "Program", "Status", "Submitted Date"]

    # Submitter and Org Owner can only list studies for their own organization, other role can see all
    listApprovedStudies: [ApprovedStudy]

    listSubmissions(organization: String, status: String, first: Int = 10, offset: Int = 0, orderBy: String = "updatedAt", sortDirection: String = "DESC"): [Submission]
    # orderyBy in ["updatedAt", "createdAt", "_id", "name", "dataCommons", "organization", "studyAbbreviation", "dbGapID", "status", "concierge"]

    version: String
}
type Mutation {
    "User initiated operations"
    saveApplication(application: AppInput!): Application
    submitApplication(_id: ID!): Application
    reopenApplication(_id: ID!): Application

    "Fed lead initiated operations"
    reviewApplication (_id: ID!): Application # same as getApplication but will set Application to "In Review" state
    approveApplication (_id: ID!, wholeProgram: Boolean, comment: String): Application
    rejectApplication (_id: ID!, comment: String!): Application

    "Admin only operations"
    deleteApplication (_id: ID!): Application

    "Submitter or Org Owner"
    createSubmission (studyAbbreviation: String, dataCommons: String, name: String): Submission
}

