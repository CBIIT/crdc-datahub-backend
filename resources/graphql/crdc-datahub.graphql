scalar Date

type Application {
    # backend managed fields
    _id: ID!
    status: String # [New, In Progress, Submitted, In Review, Approved, Rejected]
    createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    updatedAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    submittedDate: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    history: [Event] # An Event will be appended to the list whenever Application's status changes
    applicant: Applicant # auto populated by BE
    organization: Organization
    # sort fields
    programName: String
    studyAbbreviation: String
    # questionnaire data as JSON string
    questionnaireData: String
}

type Event {
    status: String # valid values are the same as it's parent
    reviewComment: String # if applicable
    dateTime: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    userID: ID!
}

input AppInput {
    _id: ID
    programName: String
    studyAbbreviation: String
    questionnaireData: String
}

type Applicant {
    applicantID: ID # auto populated by BE
    applicantName: String # auto populated by BE
    applicantEmail: String # auto populated by BE
}

type Organization {
    _id: ID
    name: String
}

type ListApplications {
    total: Int
    applications: [Application]
}

type ListSubmissions {
    total: Int
    submissions: [Submission]
}

type Submission {
    _id: ID # aka. submissionID
    displayID: ID # minimum 6 digit integer with leading zeros, can have more digits
    name: String
    submitterID: ID
    submitterName: String # <first name> <last name>
    organization: String
    dataCommons: String
    modelVersion: String # for future use
    studyAbbreviation: String
    dbGapID: String # aka. phs number
    bucketName: String # populated from organization
    rootPath: String # append "/<submission ID>" to organization's rootPath
    status: String # [New, In Progress, Submitted, Released, Canceled, Transferred, Completed, Archived]
    history: [Event]
    concierge: String # Concierge name
    createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    updatedAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
}

type Batch {
    _id: ID
    displayID: ID # minimum 6 digit integer with leading zeros, can have more digits
    submissionID: ID # parent
    type: String # [metadata, file]
    metadataIntention: String # [New, Update, Delete], Update is meant for "Update or insert", metadata only! file batches are always treated as Update
    fileCount: Int # calculated by BE
    files: [FileInfo]
    status: String # [New, Uploaded, Upload Failed, Loaded, Rejected] Loaded and Rejected are for metadata batch only
    errors: [String]
    createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    updatedAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
}

type ListBatches {
    total: Int
    batches: [Batch]
}

type FileInfo {
    filePrefix: String # prefix/path within S3 bucket
    fileName: String
    size: Int
    status: String # [New, Uploaded, Failed]
    errors: [String]
    createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    updatedAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
}

type NewBatch {
    _id: ID
    displayID: ID
    submissionID: ID
    bucketName: String # S3 bucket of the submission, for file batch / CLI use
    filePrefix: String # prefix/path within S3 bucket, for file batch / CLI use
    type: String # [metadata, file]
    metadataIntention: String # [New, Update, Delete], Update is meant for "Update or insert", metadata only! file batches are always treated as Update
    fileCount: Int
    files: [FileURL] # only available for metadata batch
    status: String # [New, Uploaded, Upload Failed, Loaded, Rejected]
    createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    updatedAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
}

type FileURL {
    fileName: String
    signedURL: String
}

input FileInput {
    fileName: String
    size: Int
}

input UploadResult {
    fileName: String
    succeeded: Boolean
    errors: [String]
}

type ApprovedStudy {
    _id: ID
    originalOrg: String # organization at the time of approval, can be absent if a submission request doesn't have an organization associated
    studyName: String
    studyAbbreviation: String # must be unique
    dbGapID: String # aka. phs number
}

type Query {
    "User or Fed lead initiated operations"
    getApplication (_id: ID!): Application
    getMyLastApplication: Application

    "Result depends on user's permission"
    listApplications(first: Int = 10, offset: Int = 0, orderBy: String = "Submitted Date", sortDirection: String = "DESC"): ListApplications
    # when first parameter is set to -1, we should return all applications (no pagination)
    # sortDirection in ["ASC", "DESC"]
    # orderBy in ["Submitter Name", "Organization", "Study", "Program", "Status", "Submitted Date"]

    # Submitter and Org Owner can only list studies for their own organization, other role can see all
    listApprovedStudies: [ApprovedStudy]

    "Result depends on user's permission"
    listSubmissions(
        organization: String,
        status: String,
        first: Int = 10,
        offset: Int = 0,
        # ["updatedAt", "createdAt", "displayID", "name", "dataCommons", "organization", "studyAbbreviation",
        #              "dbGapID", "status", "concierge"]
        orderBy: String = "updatedAt",
        sortDirection: String = "DESC"): ListSubmissions
    getSubmission(_id: ID!): Submission

    listBatches(submissionID: ID!,
        first: Int = 10,
        offset: Int = 0,
        # in ["updatedAt", "createdAt", "displayID", "fileCount", "status", "errors"]
        orderBy: String = "displayID",
        sortDirection: String = "DESC" # ["DESC", "ASC"]
    ): ListBatches
    getBatch(batchID: ID!): Batch

    version: String
}
type Mutation {
    "User initiated operations"
    saveApplication(application: AppInput!): Application
    submitApplication(_id: ID!): Application
    reopenApplication(_id: ID!): Application

    "Fed lead initiated operations"
    reviewApplication (_id: ID!): Application # same as getApplication but will set Application to "In Review" state
    approveApplication (_id: ID!, wholeProgram: Boolean, comment: String): Application
    rejectApplication (_id: ID!, comment: String!): Application

    "Admin only operations"
    deleteApplication (_id: ID!): Application

    "Submitter or Org Owner"
    createSubmission (studyAbbreviation: String!, dbGapID: String!, dataCommons: String!, name: String!): Submission
    createBatch (submissionID: ID!, type: String, metadataIntention: String, files: [FileInput]): NewBatch
    updateBatch (batchID: ID!, files: [UploadResult]): Batch
}

