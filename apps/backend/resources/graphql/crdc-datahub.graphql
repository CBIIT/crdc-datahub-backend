directive @public on FIELD_DEFINITION|QUERY
scalar Date

type Application {
    # backend managed fields
    _id: ID!
    status: String # [New, In Progress, Submitted, In Review, Approved, Rejected]
    createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    updatedAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    submittedDate: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    history: [Event] # An Event will be appended to the list whenever Application's status changes
    applicant: Applicant # auto populated by BE
    organization: Organization
    # sort fields
    programName: String
    studyName: String
    studyAbbreviation: String
    controlledAccess: Boolean
    ORCID: String
    # questionnaire data as JSON string
    questionnaireData: String
    PI: String
    openAccess: Boolean,
    conditional: Boolean,
    pendingConditions: [String],
    programAbbreviation: String,
    programDescription: String,
    version: String
}

type Event {
    status: String # valid values are the same as it's parent
    reviewComment: String # if applicable
    dateTime: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    userID: ID!
    userName: String
}

input AppInput {
    _id: ID
    programName: String
    studyAbbreviation: String
    questionnaireData: String
    studyName: String!
    controlledAccess: Boolean!
    ORCID: String
    PI: String
    openAccess: Boolean
    programAbbreviation: String
    programDescription: String,
    version: String
}

type Applicant {
    applicantID: ID # auto populated by BE
    applicantName: String # auto populated by BE
    applicantEmail: String # auto populated by BE
}

type Organization {
    _id: ID
    name: String
}

type ListApplications {
    total: Int
    applications: [Application]
    programs: [String],
    studies: [String]
    status: [String],
    submitterNames: [String]
}

type ListSubmissions {
    total: Int
    statuses: [String],
    dataCommons: [String],
    submitterNames: [String],
    submissions: [Submission]
    organizations: [Organization]
}

type Submission {
    _id: ID # aka. submissionID
    name: String
    submitterID: ID
    submitterName: String # <first name> <last name>
    organization: Organization
    dataCommons: String
    modelVersion: String # for future use
    studyAbbreviation: String
    dbGaPID: String # aka. phs number
    bucketName: String # populated from organization
    rootPath: String # "submissions/<submission ID>" to organization's rootPath
    status: String # [New, In Progress, Submitted, Released, Canceled, Transferred, Completed, Archived, Deleted]
    metadataValidationStatus: String # [New, Validating, Passed, Error, Warning], new successfully uploaded batch will set it to "New"
    fileValidationStatus: String # [New, Validating, Passed, Error, Warning], new successfully uploaded batch will set it to "New"
    crossSubmissionStatus: String # [New, Validating, Passed, Error, Warning]
    fileErrors: [QCResult] # holds submission level file errors, e.g., extra files in S3 folder
    fileWarnings: [QCResult] # holds submission level file warnings
    history: [Event]
    conciergeName: String # Concierge name
    conciergeEmail: String # Concierge email
    errors: [ErrorMessage] # store validation errors
    createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    updatedAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    intention: String # [New/Update, Delete]
    otherSubmissions: String
    dataType: String # [Metadata Only, Metadata and Data Files]
    accessedAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    inactiveReminder: Boolean
    finalInactiveReminder: Boolean
    validationStarted: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    validationEnded: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    validationType: [String] # String [metadata, file, cross-submission, data file]
    validationScope: String
    studyID: String
    controlledAccess: Boolean
    ORCID: String
    deletingData: Boolean
    archived: Boolean
    nodeCount: Int
    collaborators: [Collaborator]
    inactiveReminder_7: Boolean
    inactiveReminder_30: Boolean
    inactiveReminder_60: Boolean
    dataFileSize: FileSize
}

type FileSize {
    formatted: String
    size: Float
}

# not being used currently
type Validation {
    _id: ID
    submissionID: String
    type: [String]
    scope: String
    started:  Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    status: String
}

type Batch {
    _id: ID
    submissionID: ID # parent
    displayID: Int
    type: String # [metadata, file]
    fileCount: Int # calculated by BE
    files: [FileInfo]
    status: String # [Uploading, Uploaded, Upload Failed, Loaded, Rejected] Loaded and Rejected are for metadata batch only
    errors: [String]
    submitterID: String
    submitterName: String
    createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    updatedAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
}

type ListBatches {
    total: Int
    batches: [Batch]
}

type FileInfo {
    filePrefix: String # prefix/path within S3 bucket
    fileName: String
    size: Float
    nodeType: String
    status: String # [New, Uploaded, Failed]
    errors: [String]
    createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    updatedAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
}

type NewBatch {
    _id: ID
    submissionID: ID
    bucketName: String # S3 bucket of the submission, for file batch / CLI use
    filePrefix: String # prefix/path within S3 bucket, for file batch / CLI use
    type: String # [metadata, file]
    fileCount: Int
    files: [FileURL] # only available for metadata batch
    status: String # [Uploading, Uploaded, Upload Failed, Loaded, Rejected]
    submitterID: String
    submitterName: String
    createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
    updatedAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
}

type FileURL {
    fileID: String
    fileName: String
    signedURL: String
}

input UploadResult {
    fileName: String
    succeeded: Boolean
    errors: [String]
    skipped: Boolean
}

type TempCredentials {
    accessKeyId: String
    secretAccessKey: String
    sessionToken: String
}

type ApprovedStudy {
    _id: ID
    originalOrg: String # organization at the time of approval, can be absent if a submission request doesn't have an organization associated
    studyName: String
    studyAbbreviation: String # must be unique
    dbGaPID: String # aka. phs number
    controlledAccess: Boolean
    openAccess: Boolean
    PI: String
    ORCID: String
    createdAt: Date
    programs: [UserOrganization] #retrieve dynamically by studyID
    primaryContact: User
}

type ApprovedStudyList {
    total: Int
    studies: [ApprovedStudy]
}

type User {
  _id: ID # MongoDB native ID or UUID
  firstName: String
  lastName: String
  userStatus: String # [Active, Inactive]
  role: String # [User, Submitter, Federal Lead, Admin, Data Commons Personnel]
  IDP: String # [NIH, Login.gov]
  email: String
  organization: OrgInfo # Organization
  dataCommons: [String] # Applies to Data Commons POC role only. Empty for other roles.
  createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
  updateAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
  studies: [ApprovedStudy]
  permissions: [String]
  notifications: [String]
}

type UserInfo {
  userID: ID # MongoDB native ID or UUID
  firstName: String
  lastName: String
#  orgStatus: String # [Active, Inactive, Disabled]
  createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
  updateAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
}

type OrgInfo {
  orgID: ID # MongoDB native ID or UUID
  orgName: String
#  orgStatus: String # [Active, Inactive, Disabled]
  status: String
  createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
  updateAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
}

type UserOrganization {
  _id: ID # MongoDB native ID or UUID
  name: String
  status: String # [Active, Inactive], default to Active
  conciergeID: ID # The user's IDs are stored for the Data Commons Personnel, aka. primary contact
  conciergeName: String # The user's name (first + last) is stored for the Data Commons Personnel, aka. primary contact
  conciergeEmail: String
  studies: [ApprovedStudy] # Study names and abbreviations
  abbreviation: String
  description: String
  createdAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
  updateAt: Date # ISO 8601 date time format with UTC or offset e.g., 2023-05-01T09:23:30Z
}

type Tokens {
  tokens: [String]
  message: String
}

input UpdateUserInput {
    firstName: String!
    lastName: String!
}

input ApprovedStudyInput {
  studyID: String!
}

type SubmissionStats {
    submissionID: ID
    stats: [Stats]
}

type Stats {
    nodeName: String
    total: Int
    new: Int
    passed: Int
    warning: Int
    error: Int
}

type QCResults {
    total: Int
    results: [QCResult]
}

type QCResult{
    _id: String
    submissionID: ID
    dataRecordID: String
    validationType: String #[metadata, file]
    batchID: String
    batchIDs: [String]
    displayID: String
    type: String
    submittedID: String
    severity: String # [Error, Warning]
    uploadedDate: Date
    validatedDate: Date
    errors: [ErrorMessage]
    warnings: [ErrorMessage]
}

type CrossValidationResults {
    total: Int
    results: [CrossValidationResult]
}

type CrossValidationResult{
    submissionID: ID
    type: String
    validationType: String #[metadata, file]
    batchID: String
    displayID: Int
    submittedID: String
    severity: String # [Error, Warning]
    uploadedDate: Date # batch.updatedAt
    validatedDate: Date
    errors: [ErrorMessage]
    warnings: [ErrorMessage]
    conflictingSubmission: ID
}

type ErrorMessage {
    _id: String
    code: String
    title: String
    description: String
}

type CrossValidationMessage {
    title: String
    description: String
    conflictingSubmissions: [ID]
}

type DataRecord {
    _id: ID
    submissionID: ID
    batchIDs: [ID] # all batch IDs, each time this record is reloaded in a new batch, append batchID here
    status: String # [New, Passed, Error, Warning], New is the initial state each time it's loaded
    errors: [ErrorMessage]
    warnings: [ErrorMessage]
    createdAt: Date
    updatedAt: Date
    validatedAt: Date
    orginalFileName: String # holds original file name the data is read from
    lineNumber: Int # line number in the original file
    nodeType: String # type of the node, in "type" column of the file
    nodeID: String # ID of the node, for example: "cds-case-99907"
#    props: Properties # properties of the node
    parents: [ParentNode]
#    relationshipProps: [RelationshipProperty] # for future use
#    rawData: RawData
    s3FileInfo: S3FileInfo # only for "file" types, should be null for other nodes
    CRDC_ID: String
    additionalErrors: [CrossValidationMessage]
    latestBatchID: ID
}

type S3FileInfo {
    fileName: String
    size: Float
    md5: String
    status: String # [New, Passed, Error, Warning]
    errors: [ErrorMessage]
    warnings: [ErrorMessage]
    createdAt: Date
    updatedAt: Date
}

type DataValidation {
    success: Boolean
    message: String
}

# this type holds all the node properties in raw data (doesn't contain parent pointers and relationship properties)
#type Properties {
#    propertyName1: String # e.g, "gender": "Male"
#    propertyName2: Int # e.g, "age": 78
    # ...
#}

type ParentNode {
    parentType: String # node type of the parent node, e.g. "study"
    parentIDPropName: String # ID property name can be used to identify parent node, e.g., "study_id"
    parentIDValue: String # Value for above ID property, e.g. "CDS-study-007"
}

# for future use
#type RelationshipProperty {
#    relationshipName: String # name of the relationship
#    relationshipPropName: String # property name of the relationship
#    value: String # or other types
#}

# this type holds all data as is in a row in the file, including properties of the node,
# parent pointers and relationship properties if any
#type RawData {
#    type: String # node type is required
#    # "study.study_id": "CDS-study-007"
#    # "case_id": "cds-case-99907"
#    # "gender": "Male"
#    # "age": 78
#    # ...
#}

type AsyncProcessResult {
    success: Boolean
    message: String
}

type SubmissionNodes {
    total: Int, #total nodes of a given nodeType and data submission
    IDPropName: String,
    properties: [String], #all properties of a node including parents
    nodes: [Node]
}

type Node {
    submissionID: String,
    nodeType: String,
    nodeID: String,
    status: String,
    createdAt: Date,
    updatedAt: Date,
    validatedAt: Date,
    orginalFileName: String,
    lineNumber: Int,
    props: String #a stringified JSON string contains all properties of the node, including parent mapping properties like program.prorgam_acronym
}
type Related_Node {
    nodeType: String,
    total: Int
}
type NodeDetail_Result {
    submissionID: String,
    nodeType: String,
    nodeID: String,
    IDPropName: String,
    parents: [Related_Node], # array of Related node contains nodeType and counts
    children: [Related_Node] # array of Related node contains nodeType and counts
}

type institution {
    _id: ID,
    name: String
}

type Dashboard {
    url: String
    expiresIn: Int
}

input CDEInput {
    CDECode: String!,
    CDEVersion: String
}

type CDE {
    _id: ID,
    CDEFullName: String,
    CDECode: String,
    CDEVersion: String,
    PermissibleValues: [String],
    createdAt: Date,
    updatedAt: Date
}

type Collaborator {
    collaboratorID: ID,
    collaboratorName: String,
    Organization: OrgInfo,
    permission: String
}

input CollaboratorInput {
   collaboratorID: ID! 
   permission: String! # ["Can Edit"] 
}

type aggregatedQCResults {
    total: Int
    results: [aggregatedQCResult]
}

type aggregatedQCResult {
    title: String,
    severity: String,
    count: Int,
    code: String
}

type Permission {
    _id: String!,  #Permission Internal Name, unique 
    group: String!, #permission group
    name: String!, #permission name
    order: Int,
    checked: Boolean,
    disabled: Boolean
    inherited: [String]
}

type Notification {
    _id: String!,  #Notification Internal Name, unique 
    group: String!, #Notification group
    name: String!, #Notification name
    order: Int,
    checked: Boolean, 
    disabled: Boolean
}

type PBACDefaults {
    role: String!, #user role in ["Federal Lease", "Data Common Personnel", "Admin", "Submitter", "User"]
    permissions: [Permission], 
    notifications: [Notification]
}

type DataFileConfig {
    id_field: String! 
    name_field: String!
    size_field: String!
    md5_field: String!
    omit_DCF_prefix: Boolean,
    heartbeat_interval: Int
}

type Released_Node {
    _id: ID,
    submissionID: String
    status: String, # value in  ["Released", "Deleted"]
    dataCommons: String,
    studyID: String,
    nodeType: String,
    nodeID: String,
    props: String, #a stringified JSON string contains all properties of the node, including parent mapping properties like program.prorgam_acronym
    createdAt: Date,
    updatedAt: Date
}

type Query {
    "User or Fed lead initiated operations"
    getApplication (_id: ID!): Application
    getMyLastApplication: Application

    "Result depends on user's permission"
    listApplications(
        programName: String,
        studyName: String,
        statuses: [String],
        submitterName: String,
        first: Int = -1,
        offset: Int = 0,
        orderBy: String = "Submitted Date",
        sortDirection: String = "DESC"
    ): ListApplications
    # when first parameter is set to -1, we should return all applications (no pagination)
    # sortDirection in ["ASC", "DESC"]
    # orderBy in ["Submitter Name", "Organization", "Study", "Program", "Status", "Submitted Date"]

    # Admin only
    listApprovedStudies(
        controlledAccess: String = "All", #value in ["All", "Controlled", "Open"]
        study: String, #partial match against study name or abbreviation
        dbGaPID: String, #filter by study's dbGaPID
        first: Int = -1, #number of records to be returned, return all records if -1 is sent (also default value)
        offset: Int = 0, #number of records to be skipped before returning data
        orderBy: String = "studyName", #property name to be used for sorting 
        sortDirection: String = "ASC" #["DESC", "ASC"]
    ): ApprovedStudyList
    
    getApprovedStudy(_id: ID!): ApprovedStudy

    "Result depends on user's permission"
    listSubmissions(
        name: String,
        dbGaPID: String,
        dataCommons: String,
        submitterName: String,
        organization: String,
        status: [String],
        first: Int = -1,
        offset: Int = 0,
        # ["updatedAt", "createdAt", "name", "dataCommons", "organization", "studyAbbreviation",
        #              "dbGapID", "status", "concierge", "dataFileSize.size"]
        orderBy: String = "updatedAt",
        sortDirection: String = "DESC"): ListSubmissions

    getSubmission(_id: ID!): Submission
    submissionStats(_id: ID!): SubmissionStats
    listActiveDCPs(dataCommons: [String]!): [UserInfo]

    aggregatedSubmissionQCResults(
        submissionID: ID!,
        severity: String = "all"
        # "all", "error", "warning"
        first: Int = 20,
        # any value less than 1 will return all
        offset: Int = 0,
        # any value less than 1 will have no offset
        orderBy: String = "count"
        # ["count", "title", "code", "severity"]
        sortDirection: String = "DESC"
        # ["ASC", "DESC"]
    ): aggregatedQCResults

    submissionQCResults(
        _id: ID!,
        nodeTypes: [String],
        batchIDs: [ID],
        severities: String, # All, Error, Warning
        issueCode: String,
        first: Int = -1,
        offset: Int = 0
        # [ "uploadedDate", "nodeType", "batchID", "nodeID", "CRDC_ID", "severity"]
        orderBy: String = "uploadedDate",
        sortDirection: String = "DESC"
    ): QCResults

    submissionCrossValidationResults(
        submissionID: ID!,
        nodeTypes: [String],
        batchIDs: [ID],
        severities: String, # All, Error, Warning
        first: Int = -1,
        offset: Int = 0
        orderBy: String = "validatedDate",
        sortDirection: String = "DESC"
    ): CrossValidationResults

    listSubmissionNodeTypes(_id: ID!): [String]

    listBatches(submissionID: ID!,
        first: Int = -1,
        offset: Int = 0,
        # in ["updatedAt", "createdAt", "fileCount", "status", "errors"]
        orderBy: String = "updatedAt",
        sortDirection: String = "DESC" # ["DESC", "ASC"]
    ): ListBatches

    version: String

    "Limit to current user only"
    getMyUser : User

    "Admin and Org Owner only operations, Org Owner only see users within same organization"
    listUsers: [User]
    listActiveCurators: [UserInfo]
    getUser(userID: ID!): User

    "Admin only operations"
    listOrganizations: [UserOrganization]
    getOrganization(orgID: ID!): UserOrganization

    getSubmissionNodes(
        submissionID: String!,
        nodeType: String!,
        status: String = "All", # ["All", "New", "Error", "Passed", "Warning"]
        nodeID: String,
        first: Int = -1,
        offset: Int = 0,
        orderBy: String = "nodeID",
        sortDirection: String = "ASC"
    ): SubmissionNodes

    retrieveCLIConfig(
        submissionID: String!,
        apiURL: String!,
        dataFolder: String = "/Users/my_name/my_files",
        manifest: String = "/Users/my_name/my_manifest.tsv"
    ): String

    listInstitutions: [String]

    getNodeDetail(
        submissionID: String!, # submissionID in dataRecords collection
        nodeType: String!,
        nodeID: String!  # nodeID in dataRecords collection
    ): NodeDetail_Result

    getRelatedNodes(
        submissionID: String!,
        nodeType: String!,
        nodeID: String!,
        relationship: String!, #["parent", "child"]
        relatedNodeType: String!,
        first: Int = 10,
        offset: Int = 0,
        orderBy: String = "nodeID",
        sortDirection: String = "ASC"
    ): SubmissionNodes

    getDashboardURL(type: String!): Dashboard

    retrieveCDEs  (
        CDEInfo: [CDEInput!]!
    ) : [CDE] @public

    listPotentialCollaborators(submissionID: String!): [User]
    
    collaborators: [Collaborator]

    retrievePBACDefaults (roles: [String!]!) : [PBACDefaults] #To retrieve all roles' permissions and notifications, use roles: ["All"] as parameter.

    retrieveFileNodeConfig(submissionID: String!) : DataFileConfig

    retrieveReleasedDataByID(submissionID: String!, nodeType: String!, nodeID: String!, status: String = "Released") : [Released_Node]
}
type Mutation {
    "User initiated operations"
    saveApplication(application: AppInput!): Application
    submitApplication(_id: ID!): Application
    reopenApplication(_id: ID!): Application

    "Fed lead initiated operations"
    reviewApplication (_id: ID!): Application # same as getApplication but will set Application to "In Review" state
    approveApplication (_id: ID!, wholeProgram: Boolean, comment: String, institutions: [String]): Application
    rejectApplication (_id: ID!, comment: String!): Application
    inquireApplication (_id: ID!, comment: String!): Application

    deleteApplication (_id: ID!): Application
    restoreApplication (_id: ID!): Application

    "Submitter or Org Owner"
    createSubmission (studyID: String!, dataCommons: String!, name: String!, intention: String!, dataType: String!): Submission
    submissionAction (
        submissionID: ID!,
        # in [Submit, Release, Withdraw, Reject, Complete, Cancel, Archive]
        action: String!
        comment: String
    ): Submission

    deleteDataRecords(submissionID: String!, nodeType: String!, nodeIDs: [String!]): DataValidation
    createBatch (submissionID: ID!, type: String, files: [String!]!): NewBatch
    updateBatch (batchID: ID!, files: [UploadResult], uploading: Boolean): Batch #uploading param is for CLI heartbeat.
    createTempCredentials (submissionID: ID!): TempCredentials  
    validateSubmission(
        _id: ID!,
        types: [String] # [file, metadata]
        scope: String # [New, All] case-insensitive
    ): DataValidation

    "User initiated operations"
    updateMyUser (userInfo: UpdateUserInput!): User
    grantToken: Tokens

    "Admin only operations"
    invalidateToken(uuids: [String] = []): Tokens
    createOrganization(
        name: String!, # BE needs to check uniqueness of the new name
        conciergeID: String, # BE needs to save ID, email and name (first + last) of the concierge
        studies: [ApprovedStudyInput], # Will replace the list in the DB
        abbreviation: String!,
        description: String
    ) : UserOrganization
    editOrganization(
        orgID: ID!,
        name: String, # BE needs to check uniqueness of the new name
        conciergeID: String, # BE needs to save ID, email and name (first + last) of the concierge
        studies: [ApprovedStudyInput], # Will replace the list in the DB
        status: String, # in [Active, Inactive]
        abbreviation: String,
        description: String
    ): UserOrganization
    
    editUser(
      userID: ID!,
      permissions: [String]
      notifications: [String]
      status: String, # in [Active, Inactive]
      role: String,
      dataCommons: [String], # Applies to Data Commons POC role only. Empty for other roles.
      studies: [String] #approved study IDs optional. It will be saved into user's study list
    ): User

    editSubmissionCollaborators (
        submissionID: ID!,
        collaborators: [CollaboratorInput]
    ): Submission

    createApprovedStudy(
        name: String!,  #study name
        acronym: String, #acronym of the study, optional
        controlledAccess: Boolean!,
        openAccess: Boolean, #optional 
        dbGaPID: String, # required only Controlled
        ORCID: String, #optional in format of 0000-1234-2345-3456
        PI: String #optional
        primaryContactID: String #primary contact user ID
    ): ApprovedStudy

    updateApprovedStudy(
        studyID: ID!
        name: String!,  #study name
        acronym: String, #acronym of the study, optional
        controlledAccess: Boolean!,
        openAccess: Boolean, #optional 
        dbGaPID: String, # required only Controlled
        ORCID: String, #optional in format of 0000-1234-2345-3456
        PI: String #optional 
        primaryContactID: String #primary contact user ID
    ): ApprovedStudy

    requestAccess(
        role: String!
        studies: [String]!, # Approved Studies IDs
        additionalInfo: String,
    ): AsyncProcessResult

    updateSubmissionModelVersion(_id: String!, version: String!): Submission
}
